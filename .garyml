.GaryML version: 1.0

.Documentation title: "Dot Command Reference"

  .Section title: "System Commands"
    .help: "Display contextually relevant commands based on current conversation"
    .think: "Apply structured problem-solving with root cause analysis and prioritized solutions"
    .style: "Transform basic interface into polished enterprise-grade UI with typography, color hierarchy, and component consistency"

  .Section title: "System & Architecture Commands"
    .arch: "Design high-level architectural overview emphasizing structural elegance"
    .bisect: "Apply binary search algorithm to identify problematic code commits"
    .dependency: "Analyze and optimize package management relationships"
    .diagram: "Generate visual representation using appropriate notation"
    .microservice: "Design service boundaries with proper communication protocols"
    .optimize: "Identify efficiency bottlenecks with targeted optimization strategies"
    .overview: "Generate a high-level summary of the project's purpose, components, and technologies"
    .pattern: "Recommend appropriate design patterns with implementation examples"
    .performance: "Identify and resolve performance bottlenecks with measurable metrics"
    .proactive: "Be proactive. Determine the most important task from current chat history. Proceed with the task edits."
    .refactor: "Analyze code through minimalist principles and present elegant restructuring"
    .steps: "Break implementation into sequential actions with concrete examples"

  .Section title: "PHP & Laravel Commands"
    .blade: "Design blade components with proper slot architecture"
    .chain: "Convert existing code into fluent chain pattern implementation"
    .collection: "Transform array operations to Laravel collection pipelines"
    .command: "Create artisan command implementations with appropriate signatures"
    .facade: "Implement facade-pattern static method interfaces"
    .filament: "Design Filament-optimized administrative interfaces"
    .laravel: "Show Laravel-specific implementation for current problem"
    .legacy: "Modernize legacy PHP to Laravel/PHP 8.x implementation"
    .livewire: "Create reactive Livewire components for interactive interfaces"
    .middleware: "Implement HTTP pipeline middleware for cross-cutting concerns"
    .migration: "Design database migration with appropriate schema"
    .model: "Design eloquent models with relationship definitions"
    .observer: "Design model observer to handle lifecycle events"
    .policy: "Implement authorization policies with granular permission controls"
    .resource: "Create API resource transformers with proper data serialization"
    .test: "Design PHPUnit test suite with appropriate test coverage"
    .typesense: "Implement Typesense search integration with proper indexing"
    .validation: "Design form validation with custom rules and request objects"

  .Section title: "Go Development Commands"
    .go-api: "Design idiomatic Go API using standard libraries or frameworks"
    .go-concurrency: "Implement goroutine and channel patterns for parallel processing"
    .go-context: "Structure proper context propagation through function chains"
    .go-db: "Implement database operations using idiomatic Go patterns"
    .go-elegant: "Apply Rob Pike's minimalist principles to Go implementation"
    .go-embed: "Utilize Go's file embedding for resource management"
    .go-error: "Implement idiomatic error handling with proper wrapping"
    .go-generics: "Apply Go's generic type implementations for reusable algorithms"
    .go-idiom: "Rewrite code using idiomatic Go patterns and practices"
    .go-interface: "Design purpose-focused interface definitions with minimal methods"
    .go-marshal: "Optimize JSON/XML marshaling and unmarshaling operations"
    .go-middleware: "Create HTTP middleware chains with proper handler composition"
    .go-migration: "Strategy for migrating PHP/Laravel functionality to Go"
    .go-pattern: "Apply Go-specific design patterns with emphasis on composition"
    .go-performance: "Optimize Go code with appropriate benchmarking techniques"
    .go-refactor: "Apply Go-specific refactoring techniques to improve code quality"
    .go-reflect: "Apply reflection techniques appropriately and judiciously"
    .go-struct: "Design optimal struct architecture with appropriate field types and tags"
    .go-test: "Generate table-driven test suites with comprehensive case coverage"

  .Section title: "Code Analysis & Documentation Commands"
    .codeinsight: "Extract architectural insights from codebases through pattern recognition"
    .elegant: "Refactor for readability and reduced complexity"
    .minimal: "Provide most concise viable solution with non-essentials eliminated"
    .next: "Read specification file, identify the next incomplete task, and begin implementation"
    .plan: "Generate a step-by-step plan or outline for completing specified task"
    .remaining: "Compare plan file against current code state and list tasks to complete"
    .reverse: "Generate high-level description of code, even without comments"
    .review: "Perform code review on specified file or functional area"
    .scaffold: "Generate boilerplate code for a project component"
    .simplify: "Reduce complexity while preserving functional integrity"
    .autodoc: "Generate comprehensive code documentation with API specifications"
    .documentation: "Create technical documentation with usage examples"
    .interface: "Design clean API interfaces with minimal parameter requirements"

  .Section title: "API, Testing & Data Commands"
    .api: "Design RESTful API endpoints with proper resource modeling"
    .compatibility: "Assess cross-environment compatibility issues and mitigations"
    .functional: "Apply functional programming principles to current problem domain"
    .graphql: "Design GraphQL schema with proper resolvers and type definitions"
    .orm: "Optimize database access patterns through proper ORM configuration"
    .contradict: "Identify logical inconsistencies in current approach"
    .fuzzing: "Generate randomized inputs to test system robustness"
    .mutation: "Generate modified test variations to evaluate test coverage"
    .performancetest: "Design focused performance benchmarks with bottleneck identification"
    .propertybased: "Create tests that verify invariant properties rather than examples"
    .securitytest: "Analyze systems for security vulnerabilities systematically"
    .unittest: "Create comprehensive test coverage with edge case handling"
    .logpattern: "Convert raw logs or data into actionable patterns and insights"
    .pipeline: "Transform sequential operations into efficient processing pipelines"
    .schema: "Generate optimal database schema with proper relationships"
    .validation: "Generate comprehensive validation rules from data samples"